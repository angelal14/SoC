"""
Project 1: SCCT Atrium & Opus Game
"""

import arcade

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_TITLE = "Starting Template"
SPEED = 10


class MyGame(arcade.Window):
    """
    Main application class.

    """

    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE):
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)

        arcade.set_background_color(arcade.color.AMAZON)

        # If you have sprite lists, you should create them here,
        # and set them to None
        self.monkey = None
        self.move_sound = None
        self.banana_list = None
        self.num_banana = 0
        self.time = 0

        #characters
        self.Char0 = None

    def setup(self):
        # Create your sprites and sprite lists here
        self.monkey = arcade.Sprite("images/monkey.png", scale=0.1,
                                    center_x=400, center_y=400)

        self.move_sound = arcade.load_sound("images/banana.wav")

        self.banana_list = arcade.SpriteList()
        for x in range(100,400,100):
            banana = arcade.Sprite("images/banana.png",scale=0.1,
                                   center_x=x, center_y=200)
            self.banana_list.append(banana)


    def on_draw(self):
        """
        Render the screen.
        """

        # This command should happen before we start drawing. It will clear
        # the screen to the background color, and erase what we drew last frame.
        # Call draw() on all your sprite lists below


        arcade.start_render()
        self.monkey.draw()
        self.banana_list.draw()

        self.eat = arcade.check_for_collision_with_list(self.monkey,self.banana_list)
        for banana in self.eat:
            self.banana_list.remove(banana)
            self.num_banana += 1

        num_banana = f"# of Bananas: {self.num_banana}"
        arcade.draw_text(num_banana, 600, 50, arcade.color.AQUA, 20)



    def on_update(self, time):
        """
        All the logic to move, and the game logic goes here.
        Normally, you'll call update() on the sprite lists that
        need it.
        """
        self.monkey.update()
        self.time += time

    def on_key_press(self, key, mod):
        """
        Called whenever a key on the keyboard is pressed.

        For a full list of keys, see:
        http://arcade.academy/arcade.key.html
        """
        if key == arcade.key.LEFT:
            self.monkey.change_x = -SPEED
        elif key == arcade.key.RIGHT:
            self.monkey.change_x = +SPEED
        elif key == arcade.key.DOWN:
            self.monkey.change_y = -SPEED
        elif key == arcade.key.UP:
            self.monkey.change_y = +SPEED
            arcade.play_sound(self.move_sound)


    def on_key_release(self, key, key_modifiers):
        """
        Called whenever the user lets off a previously pressed key.
        """
        if key == arcade.key.LEFT:
            self.monkey.change_x = 0
        elif key == arcade.key.RIGHT:
            self.monkey.change_x = 0
        elif key == arcade.key.DOWN:
            self.monkey.change_y = 0
        elif key == arcade.key.UP:
            # self.monkey.change_y = -10
            self.monkey.change_y = 0

    def on_mouse_motion(self, x, y, delta_x, delta_y):
        """
        Called whenever the mouse moves.
        """
        pass

    def on_mouse_press(self, x, y, button, key_modifiers):
        """
        Called when the user presses a mouse button.
        """
        pass

    def on_mouse_release(self, x, y, button, key_modifiers):
        """
        Called when a user releases a mouse button.
        """
        pass


def main():
    """ Main method """
    game = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    game.setup()
    arcade.run()


if __name__ == "__main__":
    main()
