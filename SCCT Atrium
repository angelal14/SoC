"""
Project 1 for Summer of Code.

Player can walk around atrium to talk to characters & make drinks at Opus

"""
import arcade

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_TITLE = "Project 1"
SPEED = 10


class InstructionView(arcade.View):
    def on_show(self):
        arcade.set_background_color(arcade.color.DARK_SALMON)
        #DARK_SALMON or LAVENDER_BLUE

    def on_draw(self):
        arcade.start_render()
        arcade.draw_text("Instructions Screen",SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2,
                         arcade.color.WHITE, font_size=50,anchor_x="center")
        arcade.draw_text("Click to advance",SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - 75,
                         arcade.color.WHITE, font_size=25, anchor_x="center")


    def on_mouse_press(self, _x, _y, _button, _modifiers):
        """ If user presses mouse button, start the game. """
        game_view = MyGame()
        game_view.setup()
        self.window.show_view(game_view)


class MyGame(arcade.View):
    """
    Main application class.

    """

    def __init__(self):
        super().__init__()
        arcade.set_background_color(arcade.color.ANTIQUE_WHITE)
        arcade.start_render()
        arcade.finish_render()
        #Initialize sprite lists here, set them to None
        self.tree_list = None
        self.chair_list = None
        self.col_list = None
        self.table_list = None
        self.time = 0

        #characters
        self.char1 = None
        self.char2 = None
        self.char3 = None
        self.char4 = None
        self.char5 = None
        self.char6 = None


    def setup(self):
        #Create your sprites and sprite lists here
        arcade.draw_rectangle_filled(745, 350, 95, 400, arcade.color.BANANA_MANIA)

        self.tree_list = arcade.SpriteList()
        for y in range(185,600,150):
            tree = arcade.Sprite("game1_images/tree.png", scale=0.15,
                                  center_x=150, center_y=y)
            self.tree_list.append(tree)

        self.chair_list = arcade.SpriteList()
        for y in range(185,600,83):
            chair = arcade.Sprite("game1_images/armchair.png", scale=0.125,
                                  center_x = 60, center_y=y)
            self.chair_list.append(chair)

        self.table_list = arcade.SpriteList()
        for y in range(90, 600, 150):
            for x in range(290,650,120):
                table = arcade.Sprite("game1_images/table.png", scale=0.078,
                                      center_x=x, center_y=y)
                self.table_list.append(table)

        #characters
        self.char1 = arcade.Sprite("game1_images/Char1.png", scale=0.24,
                                   center_x=290,center_y=400)
        self.char2 = arcade.Sprite("game1_images/Char2.png", scale=0.24,
                                   center_x=410,center_y=550)
        self.char3 = arcade.Sprite("game1_images/Char3.png", scale=0.24,
                                   center_x=530,center_y=90)
        self.char4 = arcade.Sprite("game1_images/Char4.png", scale=0.24,
                                   center_x=530,center_y=240)
        self.char5 = arcade.Sprite("game1_images/Char5.png", scale=0.24,
                                   center_x=200,center_y=100)


    def on_draw(self):
        #sprite lists
        self.tree_list.draw()
        self.chair_list.draw()
        self.table_list.draw()
        arcade.draw_rectangle_filled(745,430,150,50,arcade.color.LAVENDER_BLUE,270)
        arcade.draw_text("OPUS",745,400,arcade.color.BLACK,18,anchor_x="center",rotation=270)

        #characters
        self.char1.draw()
        self.char2.draw()
        self.char3.draw()
        self.char4.draw()
        self.char5.draw()

    def on_update(self, delta_time):
        """
        All the logic to move, and the game logic goes here (???)
        Normally, you'll call update() on the sprite lists that need it.
        """
        self.char5.update()
        self.time += delta_time
        print(delta_time)

    def on_key_press(self, key, mod):
        if key == arcade.key.LEFT:
            self.char5.change_x = -SPEED
        elif key == arcade.key.RIGHT:
            self.char5.change_x = +SPEED
        elif key == arcade.key.DOWN:
            self.char5.change_y = -SPEED
        elif key == arcade.key.UP:
            self.char5.change_y = +SPEED

    def on_key_release(self, key, key_modifiers):
        if key == arcade.key.LEFT:
            self.char5.change_x = 0
        elif key == arcade.key.RIGHT:
            self.char5.change_x = 0
        elif key == arcade.key.DOWN:
            self.char5.change_y = 0
        elif key == arcade.key.UP:
            self.char5.change_y = 0

    def on_mouse_press(self, x: float, y: float, button: int, modifiers: int):
        """ If user presses on lavendar OPUS button, switch screens to show Opus game instructions. """
        if x>720 and x<770 and y>355 and y<505:
            game_view = Instruction2View()
            self.window.show_view(game_view)


class Instruction2View(arcade.View):
    def on_show(self):
        arcade.set_background_color(arcade.color.BLACK)
        arcade.start_render()
        arcade.finish_render()

    def on_draw(self):
        arcade.start_render()
        arcade.draw_text("ENTER INSTRUCTIONS HERE",SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2,
                         arcade.color.WHITE, font_size=40, anchor_x="center")
        arcade.draw_text("Click to play", SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - 75,
                         arcade.color.WHITE, font_size=20, anchor_x="center")

    def on_mouse_press(self, _x, _y, _button, _modifiers):
        """ If user presses mouse button, start OPUS game. """
        opus_game_view = OpusView()
        self.window.show_view(opus_game_view)



class OpusView(arcade.View):

    def __init__(self):
        super().__init__()
        arcade.set_background_color(arcade.color.BISQUE)
        arcade.start_render()
        arcade.finish_render()
        arcade.draw_rectangle_filled(SCREEN_WIDTH / 2, 520, 600, 100, arcade.color.LIGHT_STEEL_BLUE)
        #Initialize sprite lists here, set them to None
        self.instructions = None

    def setup(self):
        pass
    def on_draw(self):
        pass
    def on_update(self, delta_time: float):
        pass
    def on_mouse_press(self, x: float, y: float, button: int, modifiers: int):
        pass


def main():
        """ Main method """

        window = arcade.Window(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
        start_view = InstructionView()
        window.show_view(start_view)
        arcade.run()

        # game = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
        # # arcade.set_background_color(arcade.color.ANTIQUE_WHITE)
        # # arcade.start_render()
        # # arcade.finish_render()
        # game.setup()
        # arcade.run()

if __name__ == "__main__":
        main()
